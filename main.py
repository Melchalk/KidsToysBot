import logging
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

from bot_logic.bot import bot

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN.")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.message.from_user.id} started the bot")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –∏–≥—Ä—É—à–µ–∫\n–°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —á—ë–º-–Ω–∏–±—É–¥—å!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"User {update.message.from_user.id} asked for help")
    await update.message.reply_text("–Ø –º–æ–≥—É –ø–æ–±–æ–ª—Ç–∞—Ç—å —Å –≤–∞–º–∏ –∏ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –∏–≥—Ä—É—à–∫–∏ üòä")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    logger.info(f"User {update.message.from_user.id} said: {user_input}")
    response = bot(user_input)
    await update.message.reply_text(response)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Starting bot")
    app.run_polling()

if __name__ == '__main__':
    main()
